generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String             @id @default(cuid())
  name               String?
  email              String             @unique
  emailVerified      DateTime?
  image              String?
  settings           Json?              @default("{\"workDays\": [1, 2, 3, 4, 5], \"workHours\": {\"end\": \"17:00\", \"start\": \"09:00\"}}")
  accounts           Account[]
  busyHours          BusyHour[]
  busyHourCategories BusyHourCategory[]
  CalendarEvent      CalendarEvent[]
  createdNotes       Note[]             @relation("NoteCreator")
  createdSubTasks    SubTask[]          @relation("SubTaskCreator")
  assignedTasks      Task[]
  createdTasks       Task[]             @relation("TaskCreator")
  teams              TeamsOnUsers[]
  sessions           Session[]
}

model Team {
  id      String         @id @default(cuid())
  name    String
  sprints Sprint[]
  users   TeamsOnUsers[]
}

model TeamsOnUsers {
  userId String
  teamId String
  team   Team   @relation(fields: [teamId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, teamId])
}

model Sprint {
  id         String   @id @default(cuid())
  name       String
  startDate  DateTime
  endDate    DateTime
  iterations Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  teamId     String
  team       Team     @relation(fields: [teamId], references: [id])
  tasks      Task[]
}

model Task {
  id             String       @id @default(cuid())
  sprintId       String?
  title          String
  description    String?
  estimatedHours Float?
  priority       String?
  tags           String[]
  labels         String[]
  status         String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  assigneeId     String?
  createdById    String?
  dependencyFor  Dependency[] @relation("TaskDependencyFor")
  dependencies   Dependency[] @relation("TaskDependencies")
  notes          Note[]
  subTasks       SubTask[]
  assignee       User?        @relation(fields: [assigneeId], references: [id])
  createdBy      User?        @relation("TaskCreator", fields: [createdById], references: [id])
  sprint         Sprint?      @relation(fields: [sprintId], references: [id])
}

model Dependency {
  taskId          String @id
  dependsOnTaskId String
  dependsOn       Task   @relation("TaskDependencyFor", fields: [dependsOnTaskId], references: [id])
  task            Task   @relation("TaskDependencies", fields: [taskId], references: [id])
}

model SubTask {
  id          String   @id @default(cuid())
  taskId      String
  title       String
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  createdBy   User?    @relation("SubTaskCreator", fields: [createdById], references: [id])
  task        Task     @relation(fields: [taskId], references: [id])
}

model Note {
  id          String   @id @default(cuid())
  taskId      String
  content     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String?
  createdBy   User?    @relation("NoteCreator", fields: [createdById], references: [id])
  task        Task     @relation(fields: [taskId], references: [id])
}

model BusyHour {
  id         String            @id @default(cuid())
  title      String
  startTime  DateTime
  endTime    DateTime
  userId     String
  categoryId String?
  category   BusyHourCategory? @relation(fields: [categoryId], references: [id])
  user       User              @relation(fields: [userId], references: [id])
}

model BusyHourCategory {
  id        String     @id @default(cuid())
  name      String
  color     String
  userId    String
  busyHours BusyHour[]
  user      User       @relation(fields: [userId], references: [id])
}

model CalendarEvent {
  id          String   @id @default(cuid())
  userId      String
  type        String
  title       String
  start       DateTime
  end         DateTime
  isRecurring Boolean?
  user        User     @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
