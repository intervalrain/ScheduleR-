generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String       @id @default(cuid())
  email     String       @unique
  name      String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  teams     TeamsOnUsers[]
  tasks     Task[]       @relation("Assignee")
}

model Team {
  id        String       @id @default(cuid())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  users     TeamsOnUsers[]
  sprints   Sprint[]
}

model TeamsOnUsers {
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  assignedAt DateTime @default(now())

  @@id([userId, teamId])
}

model Sprint {
  id        String   @id @default(cuid())
  name      String
  startDate DateTime
  endDate   DateTime
  team      Team     @relation(fields: [teamId], references: [id])
  teamId    String
  tasks     Task[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id           String   @id @default(cuid())
  title        String
  description  String?
  status       String   // e.g., 'TODO', 'IN_PROGRESS', 'DONE'
  sprint       Sprint   @relation(fields: [sprintId], references: [id])
  sprintId     String
  assignee     User?    @relation("Assignee", fields: [assigneeId], references: [id])
  assigneeId   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // For task dependencies: a task can have many dependencies, and can be a dependency for many other tasks
  dependsOn    Task[] @relation("TaskDependencies")
  dependencyOf Task[] @relation("TaskDependencies")
}